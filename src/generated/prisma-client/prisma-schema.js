module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.27.4). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateItem {
  count: Int!
}

type AggregatePriceInfo {
  count: Int!
}

type AggregateShoppingList {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Item {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  quantity: Float
  priceInfo(where: PriceInfoWhereInput, orderBy: PriceInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PriceInfo!]
  shoppingList: ShoppingList!
}

type ItemConnection {
  pageInfo: PageInfo!
  edges: [ItemEdge]!
  aggregate: AggregateItem!
}

input ItemCreateInput {
  name: String!
  quantity: Float
  priceInfo: PriceInfoCreateManyWithoutItemInput
  shoppingList: ShoppingListCreateOneWithoutItemsInput!
}

input ItemCreateManyWithoutShoppingListInput {
  create: [ItemCreateWithoutShoppingListInput!]
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateOneWithoutPriceInfoInput {
  create: ItemCreateWithoutPriceInfoInput
  connect: ItemWhereUniqueInput
}

input ItemCreateWithoutPriceInfoInput {
  name: String!
  quantity: Float
  shoppingList: ShoppingListCreateOneWithoutItemsInput!
}

input ItemCreateWithoutShoppingListInput {
  name: String!
  quantity: Float
  priceInfo: PriceInfoCreateManyWithoutItemInput
}

type ItemEdge {
  node: Item!
  cursor: String!
}

enum ItemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  quantity_ASC
  quantity_DESC
}

type ItemPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  quantity: Float
}

input ItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  quantity: Float
  quantity_not: Float
  quantity_in: [Float!]
  quantity_not_in: [Float!]
  quantity_lt: Float
  quantity_lte: Float
  quantity_gt: Float
  quantity_gte: Float
  AND: [ItemScalarWhereInput!]
  OR: [ItemScalarWhereInput!]
  NOT: [ItemScalarWhereInput!]
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  node: Item
  updatedFields: [String!]
  previousValues: ItemPreviousValues
}

input ItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
  AND: [ItemSubscriptionWhereInput!]
  OR: [ItemSubscriptionWhereInput!]
  NOT: [ItemSubscriptionWhereInput!]
}

input ItemUpdateInput {
  name: String
  quantity: Float
  priceInfo: PriceInfoUpdateManyWithoutItemInput
  shoppingList: ShoppingListUpdateOneRequiredWithoutItemsInput
}

input ItemUpdateManyDataInput {
  name: String
  quantity: Float
}

input ItemUpdateManyMutationInput {
  name: String
  quantity: Float
}

input ItemUpdateManyWithoutShoppingListInput {
  create: [ItemCreateWithoutShoppingListInput!]
  delete: [ItemWhereUniqueInput!]
  connect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutShoppingListInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutShoppingListInput!]
  deleteMany: [ItemScalarWhereInput!]
  updateMany: [ItemUpdateManyWithWhereNestedInput!]
}

input ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput!
  data: ItemUpdateManyDataInput!
}

input ItemUpdateOneRequiredWithoutPriceInfoInput {
  create: ItemCreateWithoutPriceInfoInput
  update: ItemUpdateWithoutPriceInfoDataInput
  upsert: ItemUpsertWithoutPriceInfoInput
  connect: ItemWhereUniqueInput
}

input ItemUpdateWithoutPriceInfoDataInput {
  name: String
  quantity: Float
  shoppingList: ShoppingListUpdateOneRequiredWithoutItemsInput
}

input ItemUpdateWithoutShoppingListDataInput {
  name: String
  quantity: Float
  priceInfo: PriceInfoUpdateManyWithoutItemInput
}

input ItemUpdateWithWhereUniqueWithoutShoppingListInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateWithoutShoppingListDataInput!
}

input ItemUpsertWithoutPriceInfoInput {
  update: ItemUpdateWithoutPriceInfoDataInput!
  create: ItemCreateWithoutPriceInfoInput!
}

input ItemUpsertWithWhereUniqueWithoutShoppingListInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateWithoutShoppingListDataInput!
  create: ItemCreateWithoutShoppingListInput!
}

input ItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  quantity: Float
  quantity_not: Float
  quantity_in: [Float!]
  quantity_not_in: [Float!]
  quantity_lt: Float
  quantity_lte: Float
  quantity_gt: Float
  quantity_gte: Float
  priceInfo_every: PriceInfoWhereInput
  priceInfo_some: PriceInfoWhereInput
  priceInfo_none: PriceInfoWhereInput
  shoppingList: ShoppingListWhereInput
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
}

input ItemWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createItem(data: ItemCreateInput!): Item!
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateManyItems(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): BatchPayload!
  upsertItem(where: ItemWhereUniqueInput!, create: ItemCreateInput!, update: ItemUpdateInput!): Item!
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteManyItems(where: ItemWhereInput): BatchPayload!
  createPriceInfo(data: PriceInfoCreateInput!): PriceInfo!
  updatePriceInfo(data: PriceInfoUpdateInput!, where: PriceInfoWhereUniqueInput!): PriceInfo
  updateManyPriceInfoes(data: PriceInfoUpdateManyMutationInput!, where: PriceInfoWhereInput): BatchPayload!
  upsertPriceInfo(where: PriceInfoWhereUniqueInput!, create: PriceInfoCreateInput!, update: PriceInfoUpdateInput!): PriceInfo!
  deletePriceInfo(where: PriceInfoWhereUniqueInput!): PriceInfo
  deleteManyPriceInfoes(where: PriceInfoWhereInput): BatchPayload!
  createShoppingList(data: ShoppingListCreateInput!): ShoppingList!
  updateShoppingList(data: ShoppingListUpdateInput!, where: ShoppingListWhereUniqueInput!): ShoppingList
  updateManyShoppingLists(data: ShoppingListUpdateManyMutationInput!, where: ShoppingListWhereInput): BatchPayload!
  upsertShoppingList(where: ShoppingListWhereUniqueInput!, create: ShoppingListCreateInput!, update: ShoppingListUpdateInput!): ShoppingList!
  deleteShoppingList(where: ShoppingListWhereUniqueInput!): ShoppingList
  deleteManyShoppingLists(where: ShoppingListWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PriceInfo {
  id: ID!
  price: Float
  store: String
  item: Item!
}

type PriceInfoConnection {
  pageInfo: PageInfo!
  edges: [PriceInfoEdge]!
  aggregate: AggregatePriceInfo!
}

input PriceInfoCreateInput {
  price: Float
  store: String
  item: ItemCreateOneWithoutPriceInfoInput!
}

input PriceInfoCreateManyWithoutItemInput {
  create: [PriceInfoCreateWithoutItemInput!]
  connect: [PriceInfoWhereUniqueInput!]
}

input PriceInfoCreateWithoutItemInput {
  price: Float
  store: String
}

type PriceInfoEdge {
  node: PriceInfo!
  cursor: String!
}

enum PriceInfoOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  store_ASC
  store_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PriceInfoPreviousValues {
  id: ID!
  price: Float
  store: String
}

input PriceInfoScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  store: String
  store_not: String
  store_in: [String!]
  store_not_in: [String!]
  store_lt: String
  store_lte: String
  store_gt: String
  store_gte: String
  store_contains: String
  store_not_contains: String
  store_starts_with: String
  store_not_starts_with: String
  store_ends_with: String
  store_not_ends_with: String
  AND: [PriceInfoScalarWhereInput!]
  OR: [PriceInfoScalarWhereInput!]
  NOT: [PriceInfoScalarWhereInput!]
}

type PriceInfoSubscriptionPayload {
  mutation: MutationType!
  node: PriceInfo
  updatedFields: [String!]
  previousValues: PriceInfoPreviousValues
}

input PriceInfoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PriceInfoWhereInput
  AND: [PriceInfoSubscriptionWhereInput!]
  OR: [PriceInfoSubscriptionWhereInput!]
  NOT: [PriceInfoSubscriptionWhereInput!]
}

input PriceInfoUpdateInput {
  price: Float
  store: String
  item: ItemUpdateOneRequiredWithoutPriceInfoInput
}

input PriceInfoUpdateManyDataInput {
  price: Float
  store: String
}

input PriceInfoUpdateManyMutationInput {
  price: Float
  store: String
}

input PriceInfoUpdateManyWithoutItemInput {
  create: [PriceInfoCreateWithoutItemInput!]
  delete: [PriceInfoWhereUniqueInput!]
  connect: [PriceInfoWhereUniqueInput!]
  set: [PriceInfoWhereUniqueInput!]
  disconnect: [PriceInfoWhereUniqueInput!]
  update: [PriceInfoUpdateWithWhereUniqueWithoutItemInput!]
  upsert: [PriceInfoUpsertWithWhereUniqueWithoutItemInput!]
  deleteMany: [PriceInfoScalarWhereInput!]
  updateMany: [PriceInfoUpdateManyWithWhereNestedInput!]
}

input PriceInfoUpdateManyWithWhereNestedInput {
  where: PriceInfoScalarWhereInput!
  data: PriceInfoUpdateManyDataInput!
}

input PriceInfoUpdateWithoutItemDataInput {
  price: Float
  store: String
}

input PriceInfoUpdateWithWhereUniqueWithoutItemInput {
  where: PriceInfoWhereUniqueInput!
  data: PriceInfoUpdateWithoutItemDataInput!
}

input PriceInfoUpsertWithWhereUniqueWithoutItemInput {
  where: PriceInfoWhereUniqueInput!
  update: PriceInfoUpdateWithoutItemDataInput!
  create: PriceInfoCreateWithoutItemInput!
}

input PriceInfoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  store: String
  store_not: String
  store_in: [String!]
  store_not_in: [String!]
  store_lt: String
  store_lte: String
  store_gt: String
  store_gte: String
  store_contains: String
  store_not_contains: String
  store_starts_with: String
  store_not_starts_with: String
  store_ends_with: String
  store_not_ends_with: String
  item: ItemWhereInput
  AND: [PriceInfoWhereInput!]
  OR: [PriceInfoWhereInput!]
  NOT: [PriceInfoWhereInput!]
}

input PriceInfoWhereUniqueInput {
  id: ID
}

type Query {
  item(where: ItemWhereUniqueInput!): Item
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!
  priceInfo(where: PriceInfoWhereUniqueInput!): PriceInfo
  priceInfoes(where: PriceInfoWhereInput, orderBy: PriceInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PriceInfo]!
  priceInfoesConnection(where: PriceInfoWhereInput, orderBy: PriceInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PriceInfoConnection!
  shoppingList(where: ShoppingListWhereUniqueInput!): ShoppingList
  shoppingLists(where: ShoppingListWhereInput, orderBy: ShoppingListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShoppingList]!
  shoppingListsConnection(where: ShoppingListWhereInput, orderBy: ShoppingListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShoppingListConnection!
  node(id: ID!): Node
}

type ShoppingList {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item!]
}

type ShoppingListConnection {
  pageInfo: PageInfo!
  edges: [ShoppingListEdge]!
  aggregate: AggregateShoppingList!
}

input ShoppingListCreateInput {
  name: String!
  items: ItemCreateManyWithoutShoppingListInput
}

input ShoppingListCreateOneWithoutItemsInput {
  create: ShoppingListCreateWithoutItemsInput
  connect: ShoppingListWhereUniqueInput
}

input ShoppingListCreateWithoutItemsInput {
  name: String!
}

type ShoppingListEdge {
  node: ShoppingList!
  cursor: String!
}

enum ShoppingListOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type ShoppingListPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type ShoppingListSubscriptionPayload {
  mutation: MutationType!
  node: ShoppingList
  updatedFields: [String!]
  previousValues: ShoppingListPreviousValues
}

input ShoppingListSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShoppingListWhereInput
  AND: [ShoppingListSubscriptionWhereInput!]
  OR: [ShoppingListSubscriptionWhereInput!]
  NOT: [ShoppingListSubscriptionWhereInput!]
}

input ShoppingListUpdateInput {
  name: String
  items: ItemUpdateManyWithoutShoppingListInput
}

input ShoppingListUpdateManyMutationInput {
  name: String
}

input ShoppingListUpdateOneRequiredWithoutItemsInput {
  create: ShoppingListCreateWithoutItemsInput
  update: ShoppingListUpdateWithoutItemsDataInput
  upsert: ShoppingListUpsertWithoutItemsInput
  connect: ShoppingListWhereUniqueInput
}

input ShoppingListUpdateWithoutItemsDataInput {
  name: String
}

input ShoppingListUpsertWithoutItemsInput {
  update: ShoppingListUpdateWithoutItemsDataInput!
  create: ShoppingListCreateWithoutItemsInput!
}

input ShoppingListWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  items_every: ItemWhereInput
  items_some: ItemWhereInput
  items_none: ItemWhereInput
  AND: [ShoppingListWhereInput!]
  OR: [ShoppingListWhereInput!]
  NOT: [ShoppingListWhereInput!]
}

input ShoppingListWhereUniqueInput {
  id: ID
}

type Subscription {
  item(where: ItemSubscriptionWhereInput): ItemSubscriptionPayload
  priceInfo(where: PriceInfoSubscriptionWhereInput): PriceInfoSubscriptionPayload
  shoppingList(where: ShoppingListSubscriptionWhereInput): ShoppingListSubscriptionPayload
}
`
      }
    